{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nlet initialState = {\n  userId: '',\n  email: '',\n  login: '',\n  isAuth: false\n}; // Action Creators (AC)\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: 'samurai-network/auth/SET-USER-DATA',\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n}); //Thunks\n\nexport const getAuthUserData = () => async dispatch => {\n  let res = await authAPI.me();\n\n  if (res.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = res.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n}; //Type for Dispatch from redux-thunk //!!!!\n\nexport const loginTC = (email, password, rememberMe) => async dispatch => {\n  let res = await authAPI.login(email, password, rememberMe);\n\n  if (res.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let massage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: massage\n    }));\n  }\n};\nexport const logoutTC = () => async dispatch => {\n  let res = await authAPI.logout();\n\n  if (res.data.resultCode === 0) {\n    dispatch(setAuthUserData('', '', '', false));\n  }\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"samurai-network/auth/SET-USER-DATA\":\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["E:/Incubator/socialnetwork_ts/src/redux/auth-reducer.ts"],"names":["authAPI","stopSubmit","initialState","userId","email","login","isAuth","setAuthUserData","type","payload","getAuthUserData","dispatch","res","me","data","resultCode","id","loginTC","password","rememberMe","massage","messages","length","_error","logoutTC","logout","authReducer","state","action"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AAGA,SAAQC,UAAR,QAAyB,YAAzB;AAQA,IAAIC,YAA0B,GAAG;AAE7BC,EAAAA,MAAM,EAAE,EAFqB;AAG7BC,EAAAA,KAAK,EAAE,EAHsB;AAI7BC,EAAAA,KAAK,EAAE,EAJsB;AAK7BC,EAAAA,MAAM,EAAE;AALqB,CAAjC,C,CAOA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACJ,MAAD,EAAiBC,KAAjB,EAAgCC,KAAhC,EAA+CC,MAA/C,MAC3B;AACIE,EAAAA,IAAI,EAAE,oCADV;AAEIC,EAAAA,OAAO,EAAE;AAACN,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAFb,CAD2B,CAAxB,C,CAOP;;AACA,OAAO,MAAMI,eAAe,GAAG,MAAM,MAAOC,QAAP,IAA8B;AAC/D,MAAIC,GAAG,GAAG,MAAMZ,OAAO,CAACa,EAAR,EAAhB;;AACA,MAAID,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,QAAI;AAACC,MAAAA,EAAD;AAAKX,MAAAA,KAAL;AAAYD,MAAAA;AAAZ,QAAqBQ,GAAG,CAACE,IAAJ,CAASA,IAAlC;AACAH,IAAAA,QAAQ,CAACJ,eAAe,CAACS,EAAD,EAAKZ,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CANM,C,CAOP;;AAGA,OAAO,MAAMY,OAAO,GAAG,CAACb,KAAD,EAAgBc,QAAhB,EAAkCC,UAAlC,KAA0D,MAAOR,QAAP,IAAkC;AAC/G,MAAIC,GAAG,GAAG,MAAMZ,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBc,QAArB,EAA+BC,UAA/B,CAAhB;;AACA,MAAIP,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAEO;AACH,QAAIU,OAAO,GAAGR,GAAG,CAACE,IAAJ,CAASO,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+BV,GAAG,CAACE,IAAJ,CAASO,QAAT,CAAkB,CAAlB,CAA/B,GAAsD,YAApE;AACAV,IAAAA,QAAQ,CAACV,UAAU,CAAC,OAAD,EAAU;AAACsB,MAAAA,MAAM,EAAEH;AAAT,KAAV,CAAX,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMI,QAAQ,GAAG,MAAM,MAAOb,QAAP,IAAkC;AAC5D,MAAIC,GAAG,GAAG,MAAMZ,OAAO,CAACyB,MAAR,EAAhB;;AACA,MAAIb,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,IAAAA,QAAQ,CAACJ,eAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,KAAb,CAAhB,CAAR;AACH;AACJ,CALM;;AASP,MAAMmB,WAAW,GAAG,CAACC,KAAmB,GAAGzB,YAAvB,EAAqC0B,MAArC,KAA+E;AAC/F,UAAQA,MAAM,CAACpB,IAAf;AACI,SAAK,oCAAL;AACI,aAAO,EACH,GAAGmB,KADA;AAEH,WAAGC,MAAM,CAACnB;AAFP,OAAP;;AAIJ;AACI,aAAOkB,KAAP;AAPR;AASH,CAVD;;AAWA,eAAeD,WAAf","sourcesContent":["import {Action, Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkDispatch} from 'redux-thunk'\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type authPageType = {\r\n    userId: string\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\nlet initialState: authPageType = {\r\n\r\n    userId: '',\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n// Action Creators (AC)\r\nexport const setAuthUserData = (userId: string, email: string, login: string, isAuth: boolean) => (\r\n    {\r\n        type: 'samurai-network/auth/SET-USER-DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    }) as const\r\n\r\n\r\n//Thunks\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let res = await authAPI.me();\r\n    if (res.data.resultCode === 0) {\r\n        let {id, login, email} = res.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n//Type for Dispatch from redux-thunk //!!!!\r\ntype DispatchType = ThunkDispatch<AppStateType, void, Action>\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async (dispatch: DispatchType) => {\r\n    let res = await authAPI.login(email, password, rememberMe);\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let massage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: massage}))\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: DispatchType) => {\r\n    let res = await authAPI.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAuthUserData('', '', '', false))\r\n    }\r\n}\r\n\r\nexport type UsersActionType = ReturnType<typeof setAuthUserData>\r\n\r\nconst authReducer = (state: authPageType = initialState, action: UsersActionType): authPageType => {\r\n    switch (action.type) {\r\n        case \"samurai-network/auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}