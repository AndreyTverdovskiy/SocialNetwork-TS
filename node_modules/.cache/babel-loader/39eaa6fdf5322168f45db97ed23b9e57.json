{"ast":null,"code":"import { v1 } from 'uuid';\nimport { profileAPI, usersAPI } from \"../api/api\";\nlet initialState = {\n  posts: [{\n    id: v1(),\n    message: 'Hi, how are you?',\n    counts: 5\n  }, {\n    id: v1(),\n    message: 'It is my first post',\n    counts: 8\n  }],\n  profile: {},\n  status: ''\n}; //ActionCreators\n\nexport let addPost = message => {\n  return {\n    type: 'ADD-POST',\n    message\n  };\n};\nexport let setUserProfile = profile => {\n  return {\n    type: 'SET-USER-PROFILE',\n    profile\n  };\n};\nexport let setStatus = status => {\n  return {\n    type: 'SET-STATUS',\n    status\n  };\n};\nexport let deletePost = postId => {\n  return {\n    type: 'DELETE-POST',\n    postId\n  };\n};\n//Thunk\nexport const getUserProfileThunkCreator = userId => async dispatch => {\n  let data = await usersAPI.getProfile(userId);\n  dispatch(setUserProfile(data));\n};\nexport const getStatusTC = userId => async dispatch => {\n  let res = await profileAPI.getStatus(userId);\n  dispatch(setStatus(res.data));\n};\nexport const updateStatus = status => async dispatch => {\n  let res = await profileAPI.updateStatus(status);\n\n  if (res.data.resultCode === 0) {\n    dispatch(setStatus(status));\n  }\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD-POST':\n      {\n        let newPost = {\n          id: v1(),\n          message: action.message,\n          counts: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost]\n        }; // stateCopy.posts = [...state.posts]\n        // stateCopy.posts.push(newPost)\n        // stateCopy.newPostText = ''\n      }\n\n    case \"SET-USER-PROFILE\":\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case 'SET-STATUS':\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case 'DELETE-POST':\n      {\n        return { ...state,\n          posts: state.posts.filter(p => p.id !== action.postId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default profileReducer;","map":{"version":3,"sources":["E:/Incubator/socialnetwork_ts/src/redux/profile-reducer.ts"],"names":["v1","profileAPI","usersAPI","initialState","posts","id","message","counts","profile","status","addPost","type","setUserProfile","setStatus","deletePost","postId","getUserProfileThunkCreator","userId","dispatch","data","getProfile","getStatusTC","res","getStatus","updateStatus","resultCode","profileReducer","state","action","newPost","filter","p"],"mappings":"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","sourcesContent":["import {v1} from 'uuid';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nexport type postDataType = {\r\n    id: string\r\n    message: string\r\n    counts: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport type photoTypeType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type profileType = {\r\n    userId: number\r\n    aboutMe: string\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    photos: photoTypeType\r\n}\r\nexport type profilePageType = {\r\n    posts: Array<postDataType>\r\n    profile: profileType\r\n    status: string\r\n}\r\n\r\nlet initialState: profilePageType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi, how are you?', counts: 5},\r\n        {id: v1(), message: 'It is my first post', counts: 8}\r\n    ],\r\n    profile: {} as profileType,\r\n    status: ''\r\n}\r\n\r\n//ActionCreators\r\nexport let addPost = (message: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        message\r\n    } as const\r\n}\r\nexport let setUserProfile = (profile: profileType) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport let setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport let deletePost = (postId: string) => {\r\n    return {\r\n        type: 'DELETE-POST',\r\n        postId\r\n    } as const\r\n}\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n\r\n//Thunk\r\nexport const getUserProfileThunkCreator = (userId: string) => async (dispatch: Dispatch) => {\r\n    let data = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(data))\r\n}\r\nexport const getStatusTC = (userId: string) => async (dispatch: Dispatch) => {\r\n    let res = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(res.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let res = await profileAPI.updateStatus(status)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: ProfileActionType): profilePageType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            let newPost: postDataType = {\r\n                id: v1(),\r\n                message: action.message,\r\n                counts: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n            // stateCopy.posts = [...state.posts]\r\n            // stateCopy.posts.push(newPost)\r\n            // stateCopy.newPostText = ''\r\n        }\r\n\r\n        case \"SET-USER-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case 'SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'DELETE-POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}