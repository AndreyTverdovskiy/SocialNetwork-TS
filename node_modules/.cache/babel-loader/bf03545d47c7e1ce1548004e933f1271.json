{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n}; // Action Creators (AC)\n\nexport const follow = userId => {\n  return {\n    type: 'FOLLOW',\n    userId\n  };\n};\nexport let unfollow = userId => {\n  return {\n    type: 'UNFOLLOW',\n    userId\n  };\n};\nexport let setUsers = users => {\n  return {\n    type: 'SET-USERS',\n    users\n  };\n};\nexport let setCurrentPage = currentPage => {\n  return {\n    type: 'SET-CURRENT-PAGE',\n    currentPage\n  };\n};\nexport let setTotalUsersCount = totalUsersCount => {\n  return {\n    type: 'SET-TOTAL-USER-COUNT',\n    totalUsersCount\n  };\n};\nexport let toggleFetching = isFetching => {\n  return {\n    type: 'TOGGLE-IS-FETCHING',\n    isFetching\n  };\n};\nexport let toggleFollowingProgress = (followingInProgress, userId) => {\n  return {\n    type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\n    followingInProgress,\n    userId\n  };\n};\n//Thunks\nexport const requestUsersThunkCreator = (page, pageSize) => async dispatch => {\n  dispatch(toggleFetching(true));\n  dispatch(setCurrentPage(page));\n  let data = await usersAPI.getUsers(page, pageSize);\n  dispatch(toggleFetching(false));\n  dispatch(setUsers(data.items));\n  dispatch(setTotalUsersCount(data.totalCount));\n};\n\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let data = await apiMethod(userId);\n\n  if (data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const followThunkCreator = userId => async dispatch => {\n  let apiMethod = usersAPI.follow.bind(usersAPI);\n  followUnfollowFlow(dispatch, userId, apiMethod, follow);\n};\nexport const unfollowThunkCreator = userId => async dispatch => {\n  let apiMethod = usersAPI.unfollow.bind(usersAPI);\n  followUnfollowFlow(dispatch, userId, apiMethod, unfollow);\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FOLLOW\":\n      return { ...state,\n        // users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case \"UNFOLLOW\":\n      return { ...state,\n        // users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case \"SET-USERS\":\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case \"SET-CURRENT-PAGE\":\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case \"SET-TOTAL-USER-COUNT\":\n      {\n        return { ...state,\n          totalUsersCount: action.totalUsersCount\n        };\n      }\n\n    case \"TOGGLE-IS-FETCHING\":\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\n      {\n        return { ...state,\n          followingInProgress: action.followingInProgress ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;","map":{"version":3,"sources":["E:/Incubator/socialnetwork_ts/src/redux/users-reducer.ts"],"names":["usersAPI","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","follow","userId","type","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleFetching","toggleFollowingProgress","requestUsersThunkCreator","page","dispatch","data","getUsers","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","followThunkCreator","bind","unfollowThunkCreator","usersReducer","state","action","map","u","id","followed","filter"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nexport type locationType = {\r\n    city: string\r\n    country: string\r\n}\r\nexport type photoTypeType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type usersDataType = {\r\n    name: string\r\n    id: string\r\n    photos: photoTypeType\r\n    status: string\r\n    followed: boolean\r\n\r\n    location: locationType\r\n}\r\nexport type usersPageType = {\r\n    users: Array<usersDataType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: string[]\r\n}\r\n\r\n\r\nlet initialState: usersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n\r\n}\r\n// Action Creators (AC)\r\nexport const follow = (userId: string) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport let unfollow = (userId: string) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport let setUsers = (users: Array<usersDataType>) => {\r\n    return {\r\n        type: 'SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport let setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'SET-CURRENT-PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\nexport let setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: 'SET-TOTAL-USER-COUNT',\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport let toggleFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FETCHING',\r\n        isFetching\r\n    } as const\r\n}\r\nexport let toggleFollowingProgress = (followingInProgress: boolean, userId: string) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        followingInProgress,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type UsersActionType = ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n//Thunks\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(toggleFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize);\r\n    dispatch(toggleFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: string, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const followThunkCreator = (userId: string) => async (dispatch: Dispatch) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    followUnfollowFlow(dispatch, userId, apiMethod, follow)\r\n\r\n}\r\n\r\nexport const unfollowThunkCreator = (userId: string) => async (dispatch: Dispatch) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    followUnfollowFlow(dispatch, userId, apiMethod, unfollow)\r\n\r\n}\r\n\r\n\r\nconst usersReducer = (state: usersPageType = initialState, action: UsersActionType): usersPageType => {\r\n\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET-USERS\": {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case \"SET-TOTAL-USER-COUNT\": {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case \"TOGGLE-IS-FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}